// main: "./main.less"
//
// ^ Dont delete or move from first line, 
// this is config for Easy Less VS Code extension

@import "./global-variables.less";

div#depotOverviewContainer {
    // as container
    display: flex;
    flex-wrap: nowrap;
    flex-direction: column;

    //self
    min-height: calc(100vh - @spacing-large * 2);
    max-height: calc(100vh - @spacing-large * 2);
    
    >div.depotOverview#comparisonSelectionContainer {
        // as container
        display: flex;
        flex-wrap: nowrap;
        flex-direction: row;

        //self
        flex-shrink: 1;

        >div.comparisonInputGroup {
            display: flex;
            flex-wrap: nowrap;
            flex-direction: row;
        }

        >button#addComparison {
            padding: @button-padding-top-bottom 0.7rem;
        }
    }

    >div#depotOverviewAllChartsContainer {
        flex-grow: 1;

        // The idea is that without rendering the multiple canvas of the graphs, the boxes in which they are put are sized correctly, just by css.
        // Because the graphs try to be unlimited sized, these boxes shouldn't expand, but only fill their space at all time. This should be possible with flexboxes.
        // Then render the graphs and on window resize, just set their height to that of the css box.

        

        >div.depotOverviewChartContainer {
            // this behaves really weird because of the canvas
            // TODO Use JS to resize this on window resize. See resizeDepotOverviewGraphs()
            // This should only hold one canvas:
            // https://www.chartjs.org/docs/latest/configuration/responsive.html#important-note
            //
            // flex-grow only help to resize this if the window gets larger, 
            // but this is not resized if the window gets smaller
            position: relative;
            max-height: 100%;
            min-height: 100%;
        }
    }
}
